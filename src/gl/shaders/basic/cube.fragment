#version 330 core

// ========== DATA STRUCTURE ==========
struct Material
{
            vec3        ambient;
            vec3        diffuse;
            vec3        specular;
            float       shiness;
};

struct Light
{
            vec3        ambient;
            vec3        diffuse;
            vec3        specular;
            float       attenuation_Kc; // constant;
            float       attenuation_Kl; // linear;
            float       attenuation_Kq; // quadratic;
};


// ========== INPUT DATA FROM .VS ==========
in          vec2        v_Tcs;
in          vec3        v_VPos;
in          vec3        v_Normal;
in          vec3        v_FragPos;


// ========== INPUT DATA UNIFORM VARs ==========
uniform     sampler2D   u_Texture;
uniform     int         u_TextureExist = 0;
uniform     Material    u_Material;
uniform     Light       u_Light;
uniform     vec3        u_LightColor = vec3(1.0f,1.0f,1.0f);
uniform     vec3        u_LightPos = vec3(0.0f, 0.0f, 0.0f);
uniform     vec3        u_CameraPos;


// ========== OUTPUT DATA ==========
out         vec4        color;


// ========== HELPER FUNCS ==========
float get_attenuation_factor (float light_intensity, float kc, float kl, float kq, float light2frag_dist)
{
    return light_intensity / (kc + kl * light2frag_dist + pow(kq, 2) * light2frag_dist);
}

vec3 get_ambient_color(vec3 curr_color,
                       vec3 mat_ambient, vec3 light_ambient)
{
    return curr_color * mat_ambient * light_ambient;
}

vec3 get_diffuse_color(vec3 curr_color,
                       vec3 light_pos, vec3 frag_pos, vec3 face_normal,
                       vec3 mat_diffuse, vec3 light_diffuse)
{
    float cosine = max( dot(normalize(light_pos - frag_pos), normalize(face_normal)), 0.0f);
    return curr_color * cosine * mat_diffuse * mat_diffuse;
}

vec3 get_specular_color(vec3 curr_color,
                        vec3 light_pos, vec3 camera_pos, vec3 frag_pos, vec3 face_normal,
                        vec3 mat_specular, float mat_shiness, vec3 light_specular)
{
    vec3 reflect_direction      = reflect( normalize(frag_pos - light_pos), normalize(face_normal));
    vec3 view_direction         = normalize( camera_pos - frag_pos);
    float specular_cosine       = max( dot( reflect_direction, view_direction ), 0.0f );
    float specular_intensity    = pow( specular_cosine, mat_shiness);
    
    return curr_color * mat_specular * light_specular * specular_intensity;
}


// ========== MAIN ==========
void main()
{
    float light_intensity = 5.0f;
    float light2frag_dist = length(u_LightPos - v_FragPos);
    float attenuation_factor = get_attenuation_factor(light_intensity,
                                                      u_Light.attenuation_Kc, u_Light.attenuation_Kl, u_Light.attenuation_Kq,
                                                      light2frag_dist);
    
    vec3 color_with_light = vec3(0.f, 0.f, 0.f);
    if (u_TextureExist>0)
        color_with_light = texture(u_Texture, v_Tcs).xyz + u_LightColor;
    else
        color_with_light = vec3(0.4f, 0.4f, 0.4f) + u_LightColor / light_intensity;

    // Ambient Light
    vec3 ambient_light = get_ambient_color(color_with_light,
                                           u_Material.ambient, u_Light.ambient);
    // Diffuse Light
    vec3 diffuse_light = get_diffuse_color( color_with_light,
                                           u_LightPos, v_FragPos, v_Normal,
                                           u_Material.diffuse, u_Light.diffuse);
    // Specular Light
    vec3 specular_light = get_specular_color( color_with_light,
                                             u_LightPos, u_CameraPos, v_FragPos, v_Normal,
                                             u_Material.specular, u_Material.shiness, u_Light.specular);

    color = vec4(ambient_light + diffuse_light + specular_light, 1.0f) * attenuation_factor;
}

